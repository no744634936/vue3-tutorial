//vue3 computed  

1，可以将data里面的数据做一些处理后再输出，方便template里的不同地方调用
    lastName 接上 firstName 变成fullname

2，computed属性的方法与普通方法的区别是，
   当component里面的template标签同时用了computed 属性方法和普通方法。
   普通方法要带括号，computed 属性方法不用带括号，

  <h2>Computed Total - {{ total }}</h2>
  <h2>Method Total - {{ getTotal() }}</h2>

   ui改变的时候(例如，往input里面输入一个字符，ui就会改变)
   第一次ui渲染时，computed属性的方法与普通方法都会被调用。
   之后每输入一个字符，ui重新渲染，普通方法都会被调用一次，
   getTotal()每次都会被调用

   而computed 属性方法不被调用，(computed 属性方法返回的值在第一次被调用的时候就被缓存起来了)
   只有当与computed 属性方法 有关的变量发生变化时才会调用computed 属性方法

3,对一个object进行sort或者filter的时候，使用computed属性。不要再template里sort和filter一个object


4，在competition api里面
计算属性的函数中如果只传入一个回调函数，表示的是get
   计算属性的函数中如果传入一个对象，表示的是get和set

    const changeOneName = computed(() => {
      return userName.oneName + "我是get";
    });
--------------------------------------------------------------------
<template>
  <div class="main">
    <div>
      <input type="text" v-model="userName.twoName" />
    </div>
    <h1>计算属性</h1>
    <div>
      <input type="text" v-model="changeTwoName" />
    </div>
  </div>
</template>

<script>
import { computed, reactive } from "vue";
export default {
  setup() {
    const userName = reactive({
      twoName: "李月",
    });

    // vue3中计算属性的函数中如果传入一个对象，表示的是get和set
    const changeTwoName = computed({
      get() {
        return userName.twoName;
      },
      set(val) {
        console.log(val);
        let name = val.split("_");
        userName.twoName = name;
      },
    });
    return {
      userName,
      changeTwoName,
    };
  },
};
</script>
------------------------------------------------------
computed 什么时候用？
1，根据已有的数据组成一个新的数据时，  lastName 接上 firstName 变成fullname

2，对一个object进行sort或者filter的时候，使用computed属性然后再将object显示再template里。不要再template里sort和filter一个object
